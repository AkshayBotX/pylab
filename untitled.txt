LAB 1

import csv
import random

designations = ["Assistant Professor", "Associate Professor", "Professor"]

def get_designation(experience):
    if experience < 5:
        return "Assistant Professor"
    elif experience < 10:
        return "Associate Professor"
    else:
        return "Professor"

def get_salary(designation, experience):
    base_salary = {
        "Assistant Professor": 50000,
        "Associate Professor": 70000,
        "Professor": 100000

    }
    return base_salary[designation] + (experience * 2000)

def generate_faculty_data(n=100000, filename="faculty_data.csv"):
    faculty_list = []

    for i in range(n):
        name = f"Faculty_{i}"
        faculty_id = f"F{i:05d}"
        experience = random.randint(1, 30)
        designation = get_designation(experience)
        salary = get_salary(designation, experience)
        gender = random.choice(["Male", "Female"])
        publications = random.randint(0, 50)
        patents = publications // 5

        faculty_list.append([name, faculty_id, experience, designation, salary, gender, publications, patents])

    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Name", "ID", "Experience", "Designation", "Salary", "Gender", "Publications", "Patents"])
        writer.writerows(faculty_list)

    print(f"{n} faculty records saved to {filename}")
    return faculty_list

def load_faculty_data(filename="faculty_data.csv"):
    faculty_list = []
    with open(filename, mode='r') as file:
        reader = csv.reader(file)
        next(reader)
        for row in reader:
            faculty_list.append(row)
    return faculty_list

def add_faculty(faculty_list):
    name = input("Enter Faculty Name: ")
    faculty_id = input("Enter Faculty ID: ")
    experience = int(input("Enter Experience (years): "))
    designation = get_designation(experience)
    salary = get_salary(designation, experience)
    gender = input("Enter Gender (Male/Female): ")
    publications = int(input("Enter Publications Count: "))
    patents = publications // 5

    faculty_list.append([name, faculty_id, experience, designation, salary, gender, publications, patents])
    print("Faculty added successfully!")

def search_faculty(faculty_list):
    faculty_id = input("Enter Faculty ID to Search: ")
    for faculty in faculty_list:
        if faculty[1] == faculty_id:
            print("Faculty Found:", faculty)
            return
    print("Faculty Not Found!")

def delete_faculty(faculty_list):
    faculty_id = input("Enter Faculty ID to Delete: ")
    for faculty in faculty_list:
        if faculty[1] == faculty_id:
            faculty_list.remove(faculty)
            print("Faculty Deleted Successfully!")
            return
    print("Faculty Not Found!")

def check_bos_eligibility(faculty_list):
    experience = int(input("Enter Experience (years) to check eligibility: "))
    for faculty in faculty_list:
        if int(faculty[2]) >= experience:
            print(f"{faculty[0]} is eligible for BOS participation.")

def main():
    faculty_list = generate_faculty_data()
    while True:
        print("\nMenu:")
        print("1. Add Faculty")
        print("2. Search Faculty")
        print("3. Delete Faculty")
        print("4. Check BOS Eligibility")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            add_faculty(faculty_list)
        elif choice == '2':
            search_faculty(faculty_list)
        elif choice == '3':
            delete_faculty(faculty_list)
        elif choice == '4':
            check_bos_eligibility(faculty_list)
        elif choice == '5':
            print("Exiting Program.")
            break
        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()


LAB 2 

import random
import pandas as pd

def get_designation(experience):
    if experience < 5:
        return "Assistant Professor"
    elif experience < 10:
        return "Associate Professor"
    else:
        return "Professor"

def get_salary(designation, experience):
    base_salary = {
        "Assistant Professor": 50000,
        "Associate Professor": 70000,
        "Professor": 100000,
    }
    return base_salary[designation] + (experience * 2000)


def generate_faculty_data(n=1000):
    faculty_list = []
    for i in range(n):
        name = f"Faculty_{i}"
        faculty_id = f"F{i:05d}"
        experience = random.randint(1, 30)
        designation = get_designation(experience)
        salary = get_salary(designation, experience)
        gender = random.choice(["Male", "Female"])
        publications = random.randint(0, 50)
        patents = publications // 5

        faculty_list.append((name, faculty_id, experience, designation, salary, gender, publications, patents))

    return faculty_list

def convert_designation_to_factors(designation):
    mapping = {"Professor": 1, "Associate Professor": 2, "Assistant Professor": 3}
    return mapping[designation]

def compute_correlation(faculty_list):
    df = pd.DataFrame(faculty_list, columns=["Name", "ID", "Experience", "Designation", "Salary", "Gender", "Publications", "Patents"])


    df["Designation Factor"] = df["Designation"].apply(convert_designation_to_factors)


    corr_matrix = df[["Designation Factor", "Salary", "Experience", "Publications", "Patents"]].corr()
    print("\nCorrelation Matrix:")
    print(corr_matrix)
    return df


def main():
    faculty_data = generate_faculty_data()
    df = compute_correlation(faculty_data)
    print("\nSample Faculty Data:")
    print(df.head())

if __name__ == "__main__":
    main()

LAB 3 

import random
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression


def get_designation(experience):
    if experience < 5:
        return "Assistant Professor"
    elif experience < 10:
        return "Associate Professor"
    else:
        return "Professor"


def get_salary(designation, experience):
    if designation == "Assistant Professor":
        base_salary = 50000
    elif designation == "Associate Professor":
        base_salary = 70000
    else:  # Professor
        base_salary = 100000

    return base_salary + (experience * 2000)


def convert_designation_to_factors(designation):
    if designation == "Professor":
        return 1
    elif designation == "Associate Professor":
        return 2
    elif designation == "Assistant Professor":
        return 3
    else:
        raise ValueError("Invalid designation provided")


def generate_faculty_data(n=1000):
    faculty_list = []
    for i in range(n):
        name = f"Faculty_{i}"
        faculty_id = f"F{i:05d}"
        experience = random.randint(1, 30)
        designation = get_designation(experience)
        salary = get_salary(designation, experience)
        gender = random.choice(["Male", "Female"])
        publications = random.randint(0, 50)
        patents = publications // 5

        faculty_list.append((name, faculty_id, experience, designation, salary, gender, publications, patents))

    return faculty_list


def prepare_data_for_regression(faculty_list):
    df = pd.DataFrame(faculty_list, columns=["Name", "ID", "Experience", "Designation", "Salary", "Gender", "Publications", "Patents"])
    df["Designation Factor"] = df["Designation"].apply(convert_designation_to_factors)

    corr_matrix = df[["Designation Factor", "Salary", "Experience", "Publications", "Patents"]].corr()
    print("\nCorrelation Matrix:")
    print(corr_matrix)

    return df


def perform_linear_regression(df):

    X_salary = df[['Designation Factor']]
    y_salary = df['Salary']
    model_salary = LinearRegression().fit(X_salary, y_salary)


    X_patents = df[['Publications']]
    y_patents = df['Patents']
    model_patents = LinearRegression().fit(X_patents, y_patents)


    sample_designation_factors = [[1], [2], [3]]
    predicted_salaries = model_salary.predict(sample_designation_factors)

    sample_publications = [[5], [10], [20], [30]]
    predicted_patents = model_patents.predict(sample_publications)

    print("\nPredicted Salaries:")
    for factor, salary in zip([1, 2, 3], predicted_salaries):
        print(f"Designation Factor {factor} -> Predicted Salary: {salary:.2f}")

    print("\nPredicted Patents:")
    for pubs, pats in zip([5, 10, 20, 30], predicted_patents):
        print(f"Publications {pubs} -> Predicted Patents: {pats:.2f}")

    return model_salary, model_patents


def visualize_regression(df, model_salary, model_patents):
    plt.figure(figsize=(12, 5))


    plt.subplot(1, 2, 1)
    plt.scatter(df['Designation Factor'], df['Salary'], color='blue', label='Actual Salaries')
    plt.plot(df['Designation Factor'], model_salary.predict(df[['Designation Factor']]), color='red', label='Regression Line')
    plt.xlabel('Designation Factor')
    plt.ylabel('Salary')
    plt.title('Salary vs Designation Factor')
    plt.legend()


    plt.subplot(1, 2, 2)
    plt.scatter(df['Publications'], df['Patents'], color='green', label='Actual Patents')
    plt.plot(df['Publications'], model_patents.predict(df[['Publications']]), color='red', label='Regression Line')
    plt.xlabel('Publications')
    plt.ylabel('Patents')
    plt.title('Patents vs Publications')
    plt.legend()

    plt.tight_layout()
    plt.show()


def main():
    faculty_data = generate_faculty_data()
    df = prepare_data_for_regression(faculty_data)

    print("\nSample Faculty Data:")
    print(df.head())

    model_salary, model_patents = perform_linear_regression(df)

    visualize_regression(df, model_salary, model_patents)

if __name__ == "__main__":
    main()


LAB 4 

import random
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

num_records = 1000
faculty_data = []

designation_mapper = lambda exp: ("Professor", 1, 80000, 150000) if exp >= 20 else ("Associate Professor", 2, 50000, 80000) if exp >= 10 else ("Assistant Professor", 3, 30000, 50000)
salary_mapper = lambda min_salary, max_salary: random.randint(min_salary, max_salary)
patents_mapper = lambda publications: publications // 5

for i in range(1, num_records + 1):
    experience = random.randint(1, 40)
    designation, factor, min_salary, max_salary = designation_mapper(experience)
    salary = salary_mapper(min_salary, max_salary)
    publications = random.randint(1, 50)
    patents = patents_mapper(publications)
    gender = random.choice(["Male", "Female"])

    faculty_data.append({
        "Faculty ID": i,
        "Name": f"Faculty_{i}",
        "Experience": experience,
        "Designation": designation,
        "Designation Factor": factor,
        "Salary": salary,
        "Gender": gender,
        "Publications": publications,
        "Patents": patents,
    })


df = pd.DataFrame(faculty_data)
print(df.head())

X_salary = df[['Designation Factor', 'Experience']]
y_salary = df['Salary']
model_salary = LinearRegression().fit(X_salary, y_salary)


X_patents = df[['Publications', 'Experience']]
y_patents = df['Patents']
model_patents = LinearRegression().fit(X_patents, y_patents)


sample_inputs_salary = [[1, 10], [2, 15], [3, 5]]
designation_experience_predictions = model_salary.predict(sample_inputs_salary)

sample_inputs_patents = [[5, 5], [10, 10], [20, 15], [30, 25]]
publications_experience_predictions = model_patents.predict(sample_inputs_patents)

print("\nPredicted Salaries:")
for inputs, salary in zip(sample_inputs_salary, designation_experience_predictions):
    print(f"Designation Factor {inputs[0]}, Experience {inputs[1]} -> Predicted Salary: {salary:.2f}")

print("\nPredicted Patents:")
for inputs, patents in zip(sample_inputs_patents, publications_experience_predictions):
    print(f"Publications {inputs[0]}, Experience {inputs[1]} -> Predicted Patents: {patents:.2f}")


plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.scatter(df['Experience'], df['Salary'], color='blue', label='Actual Salaries')
plt.plot(df['Experience'], model_salary.predict(df[['Designation Factor', 'Experience']]), color='red', label='Regression Line')
plt.xlabel('Experience')
plt.ylabel('Salary')
plt.title('Salary vs Experience & Designation Factor')
plt.legend()

plt.subplot(1, 2, 2)
plt.scatter(df['Publications'], df['Patents'], color='green', label='Actual Patents')
plt.plot(df['Publications'], model_patents.predict(df[['Publications', 'Experience']]), color='red', label='Regression Line')
plt.xlabel('Publications')
plt.ylabel('Patents')
plt.title('Patents vs Publications & Experience')
plt.legend()

plt.tight_layout()
plt.show()


LAB 5 

import random
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder

class FacultyData:
    def __init__(self, num_records=1000):
        self.num_records = num_records
        self.faculty_data = []
        self.df = None
        self.generate_data()

    def generate_data(self):
        designation_mapper = lambda exp: ("Professor", 1, 80000, 150000) if exp >= 20 else ("Associate Professor", 2, 50000, 80000) if exp >= 10 else ("Assistant Professor", 3, 30000, 50000)
        salary_mapper = lambda min_salary, max_salary: random.randint(min_salary, max_salary)
        patents_mapper = lambda publications: publications // 5

        for i in range(1, self.num_records + 1):
            experience = random.randint(1, 40)
            age = experience + random.randint(25, 35)
            designation, factor, min_salary, max_salary = designation_mapper(experience)
            salary = salary_mapper(min_salary, max_salary)
            publications = random.randint(1, 50)
            patents = patents_mapper(publications)
            gender = random.choice(["Male", "Female"])

            self.faculty_data.append({
                "Faculty ID": i,
                "Name": f"Faculty_{i}",
                "Experience": experience,
                "Age": age,
                "Designation": designation,
                "Designation Factor": factor,
                "Salary": salary,
                "Gender": gender,
                "Publications": publications,
                "Patents": patents,
            })

        self.df = pd.DataFrame(self.faculty_data)

    def convert_designation_factors(self):
        return {"Professor": 1, "Associate Professor": 2, "Assistant Professor": 3}

    def logistic_regression_analysis(self):
        label_encoder = LabelEncoder()
        self.df['Designation Factor Encoded'] = label_encoder.fit_transform(self.df['Designation'])


        X_exp = self.df[['Experience']]
        y_exp = self.df['Designation Factor Encoded']
        model_exp = LogisticRegression().fit(X_exp, y_exp)


        X_age = self.df[['Age']]
        model_age = LogisticRegression().fit(X_age, y_exp)


        sample_experience = [[5], [15], [25], [35]]
        sample_age = [[30], [40], [50], [60]]

        exp_predictions = model_exp.predict(sample_experience)
        age_predictions = model_age.predict(sample_age)

        print("\nPredicted Designation based on Experience:")
        for exp, pred in zip(sample_experience, exp_predictions):
            print(f"Experience {exp[0]} -> Predicted Designation Factor: {pred}")

        print("\nPredicted Designation based on Age:")
        for age, pred in zip(sample_age, age_predictions):
            print(f"Age {age[0]} -> Predicted Designation Factor: {pred}")


faculty = FacultyData()
faculty.logistic_regression_analysis()


LAB 6

import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

class FacultyData:
    def __init__(self, num_samples=100):
        self.num_samples = num_samples
        self.df = self.generate_data()

    def generate_data(self):

        data = []
        for _ in range(self.num_samples):
            experience = random.randint(1, 35)
            age = experience + random.randint(25, 30)


            if experience < 10:
                designation, factor = "Asst", 3
            elif 10 <= experience < 20:
                designation, factor = "Asso", 2
            else:
                designation, factor = "Prof", 1

            data.append([experience, age, designation, factor])

        df = pd.DataFrame(data, columns=["Experience", "Age", "Designation", "Designation_Factor"])
        return df

    def logistic_regression(self, predictor):

        X = self.df[[predictor]]
        y = self.df["Designation_Factor"]

        model = LogisticRegression(multi_class='multinomial', solver='lbfgs', max_iter=500)
        model.fit(X, y)

        print(f"\nLogistic Regression on {predictor}:")
        print(f"Coefficient: {model.coef_}")
        print(f"Intercept: {model.intercept_}")
        print(f"Label Mapping (Manual): {{'Prof': 1, 'Asso': 2, 'Asst': 3}}")

        X_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
        probabilities = model.predict_proba(X_range)


        plt.figure(figsize=(8, 5))
        plt.scatter(X, y, color='blue', label='Actual Data')


        for i, class_label in {1: "Prof", 2: "Asso", 3: "Asst"}.items():
            plt.plot(X_range, probabilities[:, i - 1], label=f"Prob({class_label})")

        plt.xlabel(predictor)
        plt.ylabel("Probability of Designation")
        plt.title(f"Multinomial Logistic Regression: {predictor} vs Designation")
        plt.legend()
        plt.show()


faculty_data = FacultyData(num_samples=100)
faculty_data.logistic_regression("Experience")
faculty_data.logistic_regression("Age")

LAB 7

import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score

class FacultyData:
    def __init__(self, num_samples=100):
        self.num_samples = num_samples
        self.df = self.generate_data()

    def generate_data(self):
        data = []
        for _ in range(self.num_samples):
            experience = random.randint(1, 35)
            age = experience + random.randint(25, 30)

            if experience < 10:
                designation = "Asst"
                factor = 3
            elif 10 <= experience < 20:
                designation = "Asso"
                factor = 2
            else:
                designation = "Prof"
                factor = 1

            publications = max(0, experience * 2 + np.random.randint(-2, 3))
            patents = max(0, publications // 3 + np.random.randint(-1, 2))

            data.append([experience, age, designation, factor, publications, patents])

        df = pd.DataFrame(data, columns=["Experience", "Age", "Designation", "Designation_Factor", "Publications", "Patents"])
        return df


faculty_data = FacultyData(num_samples=100)
df = faculty_data.df


label_encoder = LabelEncoder()
df['Designation_Encoded'] = label_encoder.fit_transform(df['Designation'])


X = df[['Age', 'Publications', 'Patents']]
y = df['Designation_Encoded']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = Sequential()
model.add(Dense(64, input_dim=3, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(3, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])


history = model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.2, verbose=1)

y_pred_prob = model.predict(X_test)
y_pred = np.argmax(y_pred_prob, axis=1)


y_pred_labels = label_encoder.inverse_transform(y_pred)
y_test_labels = label_encoder.inverse_transform(y_test)


accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of ANN: {accuracy * 100:.2f}%")


random_indices = np.random.choice(range(len(X_test)), size=5, replace=False)
print("\nPredictions for Faculty Designation (Random 5 Samples):")
for i in random_indices:
    print(f"Faculty with Age={X_test.iloc[i]['Age']}, Publications={X_test.iloc[i]['Publications']}, Patents={X_test.iloc[i]['Patents']}:")
    print(f"  Actual Designation: {y_test_labels[i]}")
    print(f"  Predicted Designation: {y_pred_labels[i]}")
    print("-" * 50)


plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()
plt.show()


LAB 8

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


depts = ['CSE', 'ECE', 'ME', 'CE', 'EE']
publications = np.random.randint(10, 100, size=5)
patents = np.random.randint(1, 20, size=5)
assistant_professors = np.random.randint(5, 30, size=5)
age = np.random.randint(25, 60, size=5)
experience = np.random.randint(1, 35, size=5)
faculty_count = np.random.randint(10, 50, size=5)
avg_age = np.random.randint(30, 55, size=5)


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.bar(depts, publications, zs=0, zdir='y', alpha=0.8)
ax.set_xlabel('Department')
ax.set_ylabel('Publications')
ax.set_zlabel('Count')
plt.title('3D Plot of Publications per Department')
plt.show()


plt.figure()
plt.boxplot(patents, widths=0.5)
plt.xticks([1], ['Patents'])
plt.title('Box Plot of Patents per Department')
plt.show()


plt.figure()
plt.stem(depts, assistant_professors)
plt.xlabel('Department')
plt.ylabel('Assistant Professors')
plt.title('Stem Plot of Assistant Professors per Department')
plt.show()

plt.figure()
plt.stackplot(depts, age, experience, labels=['Age', 'Experience'], alpha=0.6)
plt.legend()
plt.xlabel('Department')
plt.ylabel('Values')
plt.title('Stack Plot of Age and Experience')
plt.show()

plt.figure()
plt.pie([sum(assistant_professors), sum(experience), sum(age)],
        labels=['Assistant Professors', 'Experience', 'Age'], autopct='%1.1f%%')
plt.title('Faculty Composition')
plt.show()

plt.figure()
cse_assistants = np.random.randint(5, 30, size=10)
plt.hist(cse_assistants, bins=5, alpha=0.7, color='blue', edgecolor='black')
plt.xlabel('Assistant Professors')
plt.ylabel('Frequency')
plt.title('Histogram for Assistant Professors in CSE')
plt.show()

plt.figure()
plt.bar(depts, faculty_count, color='orange')
plt.xlabel('Department')
plt.ylabel('Faculty Count')
plt.title('Bar Chart of Faculty Count per Department')
plt.show()

plt.figure()
plt.plot(depts, avg_age, marker='o', linestyle='-', color='green')
plt.xlabel('Department')
plt.ylabel('Average Age')
plt.title('Line Graph of Average Age of Faculty per Department')
plt.show()


LAB 9

import numpy as np
import matplotlib.pyplot as plt


np.random.seed(42)
depts = ['CSE', 'ECE', 'ME', 'CE', 'EE']

designations = ['Assistant Professor', 'Associate Professor', 'Professor']
faculty_data = {
    'department': np.random.choice(depts, 100),
    'designation': np.random.choice(designations, 100, p=[0.5, 0.3, 0.2]),
    'age': np.random.randint(30, 60, 100)
}

designation_counts = {d: list(faculty_data['designation']).count(d) for d in designations}


plt.figure()
plt.pie(designation_counts.values(), labels=designation_counts.keys(), autopct='%1.1f%%', colors=['blue', 'orange', 'green'])
plt.title('Distribution of Faculty Designations')
plt.show()


cse_assistant_professors = sum((np.array(faculty_data['department']) == 'CSE') & (np.array(faculty_data['designation']) == 'Assistant Professor'))
plt.figure()
plt.hist([cse_assistant_professors], bins=3, color='blue', edgecolor='black')
plt.xlabel('Assistant Professors in CSE')
plt.ylabel('Frequency')
plt.title('Histogram for Assistant Professors in CSE')
plt.show()


department_counts = {dept: list(faculty_data['department']).count(dept) for dept in depts}
plt.figure()
plt.bar(department_counts.keys(), department_counts.values(), color='purple')
plt.xlabel('Department')
plt.ylabel('Faculty Count')
plt.title('Faculty Count per Department')
plt.show()


avg_age_per_dept = {dept: np.mean([faculty_data['age'][i] for i in range(100) if faculty_data['department'][i] == dept]) for dept in depts}
plt.figure()
plt.plot(avg_age_per_dept.keys(), avg_age_per_dept.values(), marker='o', linestyle='-', color='red')
plt.xlabel('Department')
plt.ylabel('Average Age')
plt.title('Average Age of Faculty per Department')
plt.show()


LAB 10

import tkinter as tk
from tkinter import messagebox, ttk
import csv

FILE_NAME = "faculty_data.csv"

def save_data():
    name = name_entry.get().strip()
    age = age_entry.get().strip()
    designation = "Professor" if designation_var.get() else "Assistant Professor"
    gender = gender_var.get()
    department = dept_listbox.get(tk.ACTIVE) if dept_listbox.curselection() else ""
    patents = patents_scale.get()


    if not name or not age or not department:
        messagebox.showerror("Error", "Please fill all fields!")
        return


    with open(FILE_NAME, "a", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([name, age, designation, gender, department, patents])

    messagebox.showinfo("Success", "Data saved successfully!")
    clear_fields()


def clear_fields():

    name_entry.delete(0, tk.END)
    age_entry.delete(0, tk.END)
    designation_var.set(False)
    gender_var.set("Male")
    dept_listbox.selection_clear(0, tk.END)
    patents_scale.set(0)


def search_data():

    search_term = search_entry.get().strip().lower()
    result_text.delete("1.0", tk.END)
    found = False

    try:
        with open(FILE_NAME, "r") as file:
            reader = csv.reader(file)
            for row in reader:
                if search_term in [item.lower() for item in row]:
                    result_text.insert(tk.END, " | ".join(row) + "\n")
                    found = True

        if not found:
            result_text.insert(tk.END, "No such faculty name exists.\n")
    except FileNotFoundError:
        messagebox.showerror("Error", "No data found!")


root = tk.Tk()
root.title("Faculty Management System")
root.configure(bg="#F0F8FF")
name_label = tk.Label(root, text="Name:", bg="#F0F8FF", font=("Arial", 12))
name_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")
name_entry = tk.Entry(root, width=30)
name_entry.grid(row=0, column=1, padx=10, pady=5)

age_label = tk.Label(root, text="Age:", bg="#F0F8FF", font=("Arial", 12))
age_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")
age_entry = tk.Entry(root, width=30)
age_entry.grid(row=1, column=1, padx=10, pady=5)

designation_var = tk.BooleanVar()
designation_check = tk.Checkbutton(root, text="Professor", variable=designation_var, bg="#F0F8FF")
designation_check.grid(row=2, column=1, sticky="w")

gender_var = tk.StringVar(value="Male")
gender_label = tk.Label(root, text="Gender:", bg="#F0F8FF", font=("Arial", 12))
gender_label.grid(row=3, column=0, padx=10, pady=5, sticky="w")
tk.Radiobutton(root, text="Male", variable=gender_var, value="Male", bg="#F0F8FF").grid(row=3, column=1, sticky="w")
tk.Radiobutton(root, text="Female", variable=gender_var, value="Female", bg="#F0F8FF").grid(row=3, column=1, padx=60, sticky="w")


dept_label = tk.Label(root, text="Department:", bg="#F0F8FF", font=("Arial", 12))
dept_label.grid(row=4, column=0, padx=10, pady=5, sticky="w")
dept_listbox = tk.Listbox(root, height=4)
dept_listbox.grid(row=4, column=1, padx=10, pady=5, sticky="w")
scrollbar = tk.Scrollbar(root, command=dept_listbox.yview)
dept_listbox.config(yscrollcommand=scrollbar.set)
scrollbar.grid(row=4, column=2, sticky="ns")
for dept in ["CSE", "ECE", "EEE", "MECH", "CIVIL"]:
    dept_listbox.insert(tk.END, dept)


patents_label = tk.Label(root, text="Patents:", bg="#F0F8FF", font=("Arial", 12))
patents_label.grid(row=5, column=0, padx=10, pady=5, sticky="w")
patents_scale = tk.Scale(root, from_=0, to=10, orient="horizontal", bg="#F0F8FF")
patents_scale.grid(row=5, column=1, padx=10, pady=5, sticky="w")


save_button = tk.Button(root, text="Save", command=save_data, bg="#4CAF50", fg="white", font=("Arial", 12))
save_button.grid(row=6, column=1, padx=10, pady=10, sticky="w")

search_label = tk.Label(root, text="Search Faculty:", bg="#F0F8FF", font=("Arial", 12))
search_label.grid(row=7, column=0, padx=10, pady=5, sticky="w")
search_entry = tk.Entry(root, width=30)
search_entry.grid(row=7, column=1, padx=10, pady=5)
search_button = tk.Button(root, text="Search", command=search_data, bg="#008CBA", fg="white", font=("Arial", 12))
search_button.grid(row=7, column=2, padx=10, pady=5)


result_text = tk.Text(root, height=5, width=50)
result_text.grid(row=8, column=0, columnspan=3, padx=10, pady=10)


root.mainloop()


LAB 11

from PIL import Image

image_path = input("Enter the image file path: ")
img = Image.open(image_path)


print(f"Image format: {img.format}")
print(f"Image mode: {img.mode}")
print(f"Image size: {img.size}")
angle = float(input("Enter the rotation angle: "))
r_img = img.rotate(angle)
r_img.show()


width = int(input("Enter the new width: "))
height = int(input("Enter the new height: "))
size = (width, height)
r_img = r_img.resize(size, resample=Image.BILINEAR)
r_img.show()


save_path = input("Enter the new image file path to save: ")
r_img.save(save_path)

saved_img = Image.open(save_path)
print(f"Saved image size: {saved_img.size}")


LAB 12 

import socket
import threading
import time


PORT = 5000

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('localhost', PORT))
    server_socket.listen(1)
    print(f"Server is listening on port {PORT}...")

    conn, addr = server_socket.accept()
    print(f"Connected to {addr}")

    data = conn.recv(1024).decode()
    print(f"Received from client: {data}")

    response = f"Message received: {data}"
    conn.sendall(response.encode())

    conn.close()
    server_socket.close()


def start_client():
    time.sleep(1)
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', PORT))

    message = "Hello from Colab!"
    client_socket.sendall(message.encode())

    response = client_socket.recv(1024).decode()
    print(f"Server response: {response}")

    client_socket.close()

server_thread = threading.Thread(target=start_server)
server_thread.start()

start_client()


LAB 13 

import threading

def add(a, b):
    print(f"Addition: {a} + {b} = {a + b}")

def subtract(a, b):
    print(f"Subtraction: {a} - {b} = {a - b}")

def multiply(a, b):
    print(f"Multiplication: {a} * {b} = {a * b}")

def divide(a, b):
    if b != 0:
        print(f"Division: {a} / {b} = {a / b}")
    else:
        print("Division by zero is not allowed.")

def main():
    a, b = 5, 10

    t1 = threading.Thread(target=add, args=(a, b))
    t2 = threading.Thread(target=subtract, args=(a, b))
    t3 = threading.Thread(target=multiply, args=(a, b))
    t4 = threading.Thread(target=divide, args=(a, b))

    t1.start()
    t2.start()
    t3.start()
    t4.start()

    t1.join()
    t2.join()
    t3.join()
    t4.join()

    print("All operations completed.")

if __name__ == "__main__":
    main()


